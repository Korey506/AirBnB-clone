#!/usr/bin/python3
"""Module for testing file storage"""
import unittest
from models.base_model import BaseModel
from models import storage
import os


class TestFileStorage(unittest.TestCase):
    """Class to test the file storage method"""

    def setUp(self):
        """Set up test environment"""
        del_list = []
        for key in storage._FileStorage__objects.keys():
            del_list.append(key)
        for key in del_list:
            del storage._FileStorage__objects[key]

    def tearDown(self):
        """Remove storage file at end of tests"""
        try:
            os.remove('file.json')
        except:
            pass

    def test_empty_object_list(self):
        """__objects is initially empty"""
        self.assertEqual(len(storage.all()), 0)

    def test_new_object_added(self):
        """New object is correctly added to __objects"""
        new_instance = BaseModel()
        for obj in storage.all().values():
            temp = obj
        self.assertTrue(temp is obj)

    def test_all_method(self):
        """__objects is properly returned"""
        new_instance = BaseModel()
        temp = storage.all()
        self.assertIsInstance(temp, dict)

    def test_base_model_instantiation(self):
        """File is not created on BaseModel save"""
        new_instance = BaseModel()
        self.assertFalse(os.path.exists('file.json'))

    def test_empty_file_saved(self):
        """Data is saved to file"""
        new_instance = BaseModel()
        data = new_instance.to_dict()
        new_instance.save()
        new_instance2 = BaseModel(**data)
        self.assertNotEqual(os.path.getsize('file.json'), 0)

    def test_save_method(self):
        """FileStorage save method"""
        new_instance = BaseModel()
        storage.save()
        self.assertTrue(os.path.exists('file.json'))

    def test_reload_method(self):
        """Storage file is successfully loaded to __objects"""
        new_instance = BaseModel()
        storage.save()
        storage.reload()
        for obj in storage.all().values():
            loaded = obj
        self.assertEqual(new_instance.to_dict()['id'], loaded.to_dict()['id'])

    def test_reload_empty_file(self):
        """Load from an empty file"""
        with open('file.json', 'w') as f:
            pass
        with self.assertRaises(ValueError):
            storage.reload()

    def test_reload_nonexistent_file(self):
        """Nothing happens if file does not exist"""
        self.assertEqual(storage.reload(), None)

    def test_base_model_save_method(self):
        """BaseModel save method calls storage save"""
        new_instance = BaseModel()
        new_instance.save()
        self.assertTrue(os.path.exists('file.json'))

    def test_file_path_type(self):
        """Confirm __file_path is string"""
        self.assertEqual(type(storage._FileStorage__file_path), str)

    def test_objects_type(self):
        """Confirm __objects is a dict"""
        self.assertEqual(type(storage.all()), dict)

    def test_key_format(self):
        """Key is properly formatted"""
        new_instance = BaseModel()
        _id = new_instance.to_dict()['id']
        for key in storage.all().keys():
            temp = key
        self.assertEqual(temp, 'BaseModel' + '.' + _id)

    def test_storage_object_created(self):
        """FileStorage object storage created"""
        from models.engine.file_storage import FileStorage
        self.assertEqual(type(storage), FileStorage)
